# -*- coding: utf-8 -*-
"""ListaExercicio4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_KWPG90SzY2IaPi7nSV45_m4r0bIhkpe

# ðŸ“Š Projeto Final â€“ AnÃ¡lise ContÃ¡bil com Ajuste EconÃ´mico

Este projeto tem como objetivo integrar anÃ¡lise de dados contÃ¡beis de empresas com indicadores econÃ´micos, utilizando Python, Pandas, Ipeadata e Streamlit.

1) Configure o tÃ­tulo na barra do navegador, da pÃ¡gina do projeto no Streamlit e descriÃ§Ã£o inicial do projeto (peso: 1,0)

- TÃ­tulo na barra (`page_title`): Lista de ExercÃ­cios 4
- TÃ­tulo da pÃ¡gina (`header`): Projeto Final â€“ AnÃ¡lise ContÃ¡bil com Ajuste EconÃ´mico
- DescriÃ§Ã£o projeto (`write`): Este projeto tem como objetivo integrar anÃ¡lise de dados contÃ¡beis de empresas com indicadores econÃ´micos, utilizando Python, Pandas, Ipeadata e Streamlit.
"""


import streamlit as st

st.set_page_config(
    page_title="Lista de ExercÃ­cios 4",
    page_icon="ðŸ“Š",
)
st.header("Projeto Final â€“ AnÃ¡lise ContÃ¡bil com Ajuste EconÃ´mico")
st.write("Este projeto tem como objetivo integrar anÃ¡lise de dados contÃ¡beis de empresas com indicadores econÃ´micos, utilizando Python, Pandas, Ipeadata e Streamlit.")

"""2) Importe os dados do arquivo empresas_dados.csv utilizando pandas e apresente todas as linhas da df (peso: 1,0)

Dica: Utilize `head(len(df))`
"""

import pandas as pd

df = pd.read_csv("empresas_dados.csv", sep=';')
st.dataframe(df.head(len(df)))

"""3) Calcule os indicadores Margem LÃ­quida e ROA e salve como novas coluna da df. Depois apresente os dois indicadores no mesmo grÃ¡fico de linhas, agrupado por Ano  (peso: 1,0)

- Margem LÃ­quida = Lucro LÃ­quido / Receita LÃ­quida * 100
- ROA = Lucro LÃ­quido / Ativo Total *  100
"""

import matplotlib.pyplot as plt

df['Margem_Liquida'] = (df['Lucro LÃ­quido'] / df['Receita LÃ­quida']) * 100
df['ROA'] = (df['Lucro LÃ­quido'] / df['Ativo Total']) * 100

df_agrupado = df.groupby('Ano')[['Margem_Liquida', 'ROA']].mean().reset_index()

st.dataframe(df)
fig, ax = plt.subplots(figsize=(10,6))
ax.plot(df_agrupado['Ano'], df_agrupado['Margem_Liquida'], marker='o', label='Margem LÃ­quida')
ax.plot(df_agrupado['Ano'], df_agrupado['ROA'], marker='s', label='ROA')

ax.set_title('Margem LÃ­quida e ROA por Ano')
ax.set_xlabel('Ano')
ax.set_ylabel('%')
ax.grid(True)
fig.tight_layout()
st.pyplot(fig)

"""4) Utilize o pacote ipeadatapy e faÃ§a busca para encontrar o indicador que traga o IPCA, taxa de variaÃ§Ã£o, em % e anual: (peso: 2,0)

- Baixe os dados no perÃ­odo de 2010 a 2024
- Altere o nome da coluna "YEAR" para "Ano"
- Altere o nome da coluna "VALUE ((% a.a.))" para "IPCA"
- Apresente a df para checar se tudo deu certo
"""


import ipeadatapy as ip
import ipeadata as pd

df_ipca = ip.timeseries('PRECOS12_IPCA12')
df_ipca = df_ipca[(df_ipca['YEAR'] >= 2010) & (df_ipca['YEAR'] <= 2024)]

st.write("Colunas antes da renomeaÃ§Ã£o:")
st.write(df_ipca.columns)

df_ipca = df_ipca.rename(columns={
    'YEAR': 'Ano',
    "VALUE (-)": 'IPCA'
})

st.write("Colunas apÃ³s a renomeaÃ§Ã£o:")
st.write(df_ipca.columns)

st.write("Dataframe resultante:")
st.dataframe(df_ipca)


"""5) Combine as duas df (Excel e IPEA) em uma nova df e calcule nova coluna chamada Receita Real (peso: 2,0)

- Utilize a funÃ§Ã£o `pd.merge()` para unificar as duas df utiilizando a coluna Ano como conexÃ£o (chave primÃ¡ria) entre elas
- Crie nova coluna chamada Receita Real que serÃ¡ o resultado da Receita LÃ­quida de cada ano deduzido o IPCA do ano: `Receita Real = Receitta LÃ­quida - ( Receita LÃ­quida * (IPCA/100) )`
- Apresente a nova df combinada

"""

receita_real = pd.merge(df, ipca_df, on='Ano')
receita_real['Receita Real'] = receita_real['Receita LÃ­quida'] - (receita_real['Receita LÃ­quida'] * (receita_real['IPCA'] / 100))

display(receita_real.head())

"""6) Crie grÃ¡fico de linha que apresente as variÃ¡veis Receita LÃ­quida e Receita Real ao longo dos anos (no mesmo grÃ¡fico) (peso: 1,0)"""

receita_agrupada_por_ano = receita_real.groupby('Ano')[['Receita LÃ­quida', 'Receita Real']].mean().reset_index()


st.dataframe(df)
fig, ax = plt.subplots(figsize=(10,6))
ax.plot(receita_agrupada_por_ano['Ano'], receita_agrupada_por_ano['Receita LÃ­quida'], marker='o', label='Receita LÃ­quida')
ax.plot(receita_agrupada_por_ano['Ano'], receita_agrupada_por_ano['Receita Real'], marker='s', label='Receita Real')

ax.set_titletitle('Receita LÃ­quida e Receita Real por Ano')
ax.set_xlabel('Ano')
ax.set_ylabel('Valor')
ax.legend()
ax.grid(True)
fig.tight_layout()
st.pyplot(fig)

"""7) FaÃ§a os ajustes necessÃ¡rios e leve este projeto para a web usando GitHub e Streamlit (peso: 2,0)

- CaÃ§a os ajustes necessÃ¡rios no projeto para ser publicado no Streamlit
- Crie novo repositÃ³rio pÃºblico no GitHub e leve os arquivos .py e .csv pra lÃ¡. Aproveite e crie o arquivo requirements.txt com os pacotes utilizados no projeto
- Crie novo projeto no Streamlit e associe ao repositÃ³rio da lista
"""
